#!/bin/sh
# Purpose:    This script attempts to generate random integers through any means necessary
# Author:     Rawiri Blundell
# Copyright:  (c) 2016 - Beerware As-Is.  No warranty or liability.
# Date:       15022016
###############################################################################
# Set the default variable states
nMin=1
nMax=32767
debug=false
count=1

# Getopts
while getopts "c:dh:m:M:" Flags; do
  case "${Flags}" in
    c)  case "${OPTARG}" in
          (*[!0-9]*|'') printf "%s\n" "[ERROR]: (-c) '${OPTARG}' is not a number"; exit 1;;
          (*)           count="${OPTARG}";;
        esac
    d)  debug="true";;
    h)  printf "%s\n" "rand - generate random integers" \
        "Optional Arguments:" \
        "-c [count.  Number of numbers (Default:${count})]" \
        "-d [debug.  Tells you which processing method is used (Default:off)]" \
        "-h [help]" \
        "-m [minimum number (Default:${nMin})]" \
        "-M [maximum number (Default:${nMax})]"
        return 0;;
    m)  case "${OPTARG}" in
          (*[!0-9]*|'') printf "%s\n" "[ERROR]: (-m) '${OPTARG}' is not a number"; exit 1;;
          (*)           nMin="${OPTARG}";;
        esac
    M)  case "${OPTARG}" in
          (*[!0-9]*|'') printf "%s\n" "[ERROR]: (-M) '${OPTARG}' is not a number"; exit 1;;
          (*)           nMax="${OPTARG}";;
        esac
    \?)  echo "ERROR: Invalid option: '-$OPTARG'.  Try 'rand -h' for usage." >&2
         return 1;;
    :)  echo "Option '-$OPTARG' requires an argument. e.g. '-$OPTARG 10'" >&2
        return 1;;
  esac
done

# Put these vars into the environment
# Initially this is so we can import them to perl
export nMin nMax

# Cater for GNU shuf, nice and fast
if command -v shuf > /dev/null 2>&1; then
  if [ "${debug}" = true ]; then
    printf "%s\n" "[DEBUG]: Method used is 'shuf'"
  fi
  shuf -i "${nMin}"-"${nMax}" -n "${count}"

# If we're on a BSD based host, likely 'jot' is available, so let's use it
elif command -v jot > /dev/null 2>&1; then
  if [ "${debug}" = true ]; then
    printf "%s\n" "[DEBUG]: Method used is 'jot'"
  fi
  for number in "${count}"; do
    jot w %i -r 1 "${nMin}" "${nMax}"
  done

# Now we start going less-native and try perl.  Very likely to be there,   
# so very likely this will be a commonly used option
elif command -v perl > /dev/null 2>&1; then
  if [ "${debug}" = true ]; then
    printf "%s\n" "[DEBUG]: Method used is 'perl'"
  fi
  for number in "${count}"; do
    perl -le '$mn=$ENV{nMin}; $mx=$ENV{nMax}; print int(rand($mx-$mn))+$mn '
  done
  
# Otherwise, we try python
elif command -v python > /dev/null 2>&1; then
  if [ "${debug}" = true ]; then
    printf "%s\n" "[DEBUG]: Method used is 'python'"
  fi
  for number in "${count}"; do
    python -c "import random; print random.randint(${nMin},${nMax})"
  done
# No perl or python?  Surely awk/oawk/nawk/gawk is hanging around?
elif command -v awk > /dev/null 2>&1; then
  if [ "${debug}" = true ]; then
    printf "%s\n" "[DEBUG]: Method used is 'awk'"
  fi
  for number in "${count}"; do
    awk -v min=5 -v max=10 'BEGIN{srand(); print int(min+rand()*(max-min+1))}'
    sleep 1
  done
# No perl, python or awk?   We're *really* regressing now.  Let's try for a POSIX friendly shell solution
# First, check if we have the RANDOM env var
elif [ -n "${RANDOM}" ]; then


# Finally, no perl, python, awk or bash... we're left with POSIX


# Ultimate failure
else
  printf "%s\n" "[ERROR]: I could not find a valid method with which to process your request."
  exit 1
fi


