#!/bin/bash
# A script that changes the wallpaper based on the time of day
# Auto-adjusts day-start and day-end from weather.com
# Provenance: https://github.com/rawiriblundell/

################################################################################
# Copyright and License
################################################################################
#  Copyright 2021 Rawiri Blundell

#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at

#      http://www.apache.org/licenses/LICENSE-2.0

#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

################################################################################
# User configurable constants (i.e. shouldn't need to edit below this section)
################################################################################
# TODO: Attempt to auto-detect and prompt user to confirm?
# Get your location code from https://weather.codes/search
location_code=NZXX0049

# Maximum age for a config file, in seconds
config_max_age=604800 # 604800 = 1 week

readonly location_code config_max_age

################################################################################
# Traps and die()
################################################################################
# Catch our own PID to ensure that die() works within subshells
_self_pid="${$}"
export _self_pid

# Print errors to stderr and then exit
die() {  
  if [ -t 0 ]; then
    printf -- '\e[31m\n[!] %s\e[0m\n\n' "${*}" >&2
  else
    printf -- '\n[!] %s\n\n' "${*}" >&2
  fi
  # Send a TERM signal to the top level PID, this is trapped and exit 1 is forced
  kill -s TERM "${_self_pid}"
}

exit_on_SIGINT() { die Program Interrupted; }
exit_on_SIGTERM() { die Program Terminated; }

trap exit_on_SIGINT SIGINT
trap exit_on_SIGTERM SIGTERM

################################################################################
# Init: ensure required vars and directories are in place
################################################################################
DISPLAY=:0
XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"
XDG_STATE_HOME="${XDG_STATE_HOME:-$HOME/.local/state}"

[[ ! -d "${XDG_DATA_HOME}" ]] && die "${XDG_DATA_HOME} not found"
[[ ! -d "${XDG_STATE_HOME}" ]] && die "${XDG_STATE_HOME} not found"

data_dir="${XDG_DATA_HOME}/dynamic_wallpapers"
state_dir="${XDG_STATE_HOME}/dynamic_wallpapers"
state_file="${state_dir}/current_state"

mkdir -p "${data_dir}" || die "Could not create ${data_dir}"
mkdir -p "${state_dir}" || die "Could not create ${state_dir}"

################################################################################
# Define our functions
################################################################################
get_sunrise_sunset() {
  curl -s "https://weather.com/weather/today/l/${1:?No location code}" | 
    grep SunriseSunset | 
    grep -oE '((1[0-2]|0?[1-9]):([0-5][0-9]) ?([AaPp][Mm]))'
}

seconds_since_midnight() {
  date -d "1970-01-01 UTC ${1:-$(date +%T)}" +%s
}

# If there's only two images in our set,
# we treat the first as daytime, and the second as nighttime
#
# If there's more than one image in the set, we work on the following logic:
# Between sunset and sunrise, we use the last image in the set
# We sequence the rest in reverse order and then in-order
# i.e. sunrise to sunpeak => sunpeak to sunset.
# For example, with an 8 image set:
# Overnight: 8
# Daytime: 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7
generate_config() {
  _set_name="${1:?No target set specified}"
  [[ -d "${data_dir}/${_set_name}" ]] || die "${data_dir}/${_set_name} not found."

  # Load our images into an array
  image_set=( "${data_dir}/${_set_name}/"* )

  # A one-image set is not what this script is about
  (( "${#image_set[@]}" <= 1 )) && die "${_set_name} set size too small (<=1)"

  # Gather our time boundaries
  mapfile -t sunbounds < <(get_sunrise_sunset "${location_code}")
  bound_start="$(seconds_since_midnight "${sunbounds[0]}")"
  bound_end="$(seconds_since_midnight "${sunbounds[1]}")"
  bound_size="$(( bound_end - bound_start ))"

  # The config file is in 'start:finish:filename' format
  # start:finish:loop:duration:seq,uence,of,images
  # Here we handle 2-image sets specifically to demonstrate the config structure
  if (( "${#image_set[@]}" == 2 )); then
    {
      # Print the file's generation time
      printf -- '%s\n' "config_file_generated=$(date +%s)"
      # Midnight to sunrise, we use the overnight image
      printf -- '%s:%s:%s\n' "0" "${bound_start}" "${image_set[1]}"
      # Sunrise to sunset, we use the daytime image
      printf -- '%s:%s:%s\n' "${bound_start}" "${bound_end}" "${image_set[0]}"
      # Sunset to midnight, we use the overnight image
      printf -- '%s:%s:%s\n' "${bound_end}" "86400" "${image_set[1]}"
    } > "${state_dir}/${_set_name}.conf"
  else
    # Assign the last image in the array to a variable, then remove it from the array
    overnight_image="${image_set[${#image_set[@]}-1]}"
    unset image_set[${#image_set[@]}-1]

    # Build a sequence of images, working from night to day and back to night
    for (( i="${#image_set[@]}";i>=0;--i )); do
      (( i == "${#image_set[@]}" )) && continue
      set_sequence+=( "${image_set[i]}" )
    done
    for (( i=1;i<="${#image_set[@]}";++i )); do
      (( i == "${#image_set[@]}" )) && continue
      set_sequence+=( "${image_set[i]}" )
    done

    # Figure out the duration that each image should run for
    duration=$(( bound_size / ("${#set_sequence[@]}" + 2) ))

    {
      # Print the file's generation time
      printf -- '%s\n' "config_file_generated=$(date +%s)"

      # Midnight to sunrise, we use the overnight image
      printf -- '%s:%s:%s\n' "0" "${bound_start}" "${overnight_image}"

      start="${bound_start}"
      finish="$(( bound_start + duration ))"

      for image in "${set_sequence[@]}"; do
        printf -- '%s:%s:%s\n' "${start}" "${finish}" "${image}"
        start="${finish}"
        finish="$(( finish + duration ))"
      done
      
      # Sunset to midnight, we use the overnight image
      printf -- '%s:%s:%s\n' "${bound_end}" "86400" "${overnight_image}"
    } > "${state_dir}/${_set_name}.conf"
  fi
}

get_random_set() {
  # Create an array of set directories from within data_dir
  mapfile -t set_list < <(find "${data_dir}" -maxdepth 1 -type d | grep -xv "${data_dir}")
  (( "${#set_list[@]}" == 0 )) && die "No image sets found in ${data_dir}"
  # Randomly select a set from the array
  set_name="${set_list[$RANDOM % ${#set_list[@]}]}"
  printf -- '%s\n' "Randomly selected ${data_dir}/${set_name}..."
}

parse_opts() {
  case "${1}" in
    (-h|--help|help|--usage|usage)
      usage 0
    ;;
    ('')
      # If blank and state file, use the state
      if [[ -r "${state_file}" ]]; then
        # shellcheck source=/dev/null
        . "${state_file}"
      # If blank and no state file, choose randomly
      else
        get_random_set
      fi
    ;;
    (random)
      # I considered comparing the set defined in the state file with the output
      # of get_random_set() to ensure a new set is selected
      # But that reduces random chance, and what if there's only one or two sets?
      # If someone reading this in the future feels passionately about this
      # then I have at least laid out all the groundwork for this to be rewritten
      get_random_set
    ;;
    (*)
      if [[ -d "${data_dir}/${1}" ]]; then
        set_name="${1}"
      else
        die "${data_dir}/${1} does not appear to be a valid image set directory."
      fi
    ;;
  esac
}

set_state() {
  {
    printf -- '%s\n' "state_file_generated=$(date +%s)" \
      "wallpaper=${wallpaper}" \
      "set_name=${set_name}" \
      "set_path=${set_path}"
  } > "${state_file}"
}

case "${DESKTOP_SESSION}" in
  (mate)
    set_wallpaper() {
      gsettings set org.mate.background picture-filename "${1:?No image specified}"
      gsettings set org.mate.screensaver picture-filename "${1:?No image specified}"
    }
  ;;
  (XFCE|Xubuntu)
    set_wallpaper() {
      local screen monitor
      screen="$(xrandr --listactivemonitors | awk -F ' ' 'END {print $1}' | tr -d \:)"
      monitor="$(xrandr --listactivemonitors | awk -F ' ' 'END {print $2}' | tr -d \*+)"
      xfconf-query \
        --channel xfce4-desktop \
        --property "/backdrop/screen${screen}/monitor${monitor}/workspace0/last-image" \
        --set "${1:?No image specified}"
    }
  ;;
  (LXDE) 
    set_wallpaper() {
      pcmanfm --set-wallpaper="${1:?No image specified}"
    }
  ;;
  ([Cc]innamon)
    set_wallpaper() {
      gsettings set org.cinnamon.desktop.background picture-uri "file:///${1:?No image specified}"
      gsettings set org.cinnamon.desktop.screensaver picture-uri "file:///${1:?No image specified}"
    }
  ;;
  (Neon|Plasma|KDE)
    set_wallpaper() {
      qdbus org.kde.plasmashell /PlasmaShell org.kde.PlasmaShell.evaluateScript "
        var allDesktops = desktops();
        print (allDesktops);
        for (i=0;i<allDesktops.length;i++) {
          d = allDesktops[i];
          d.wallpaperPlugin = 'org.kde.image';
          d.currentConfigGroup = Array('Wallpaper',
                        'org.kde.image',
                        'General');
          d.writeConfig('Image', 'file://${1:?No image specified}')
        }"
      kwriteconfig5 --file "${HOME}/.config/kscreenlockerrc" \
        --group Greeter \
        --group Wallpaper \
        --group org.kde.image \
        --group General \
        --key Image "file://${1:?No image specified}'"
    }
  ;;
  (GNOME|Ubuntu|Pop|Deepin)
    set_wallpaper() {
      gsettings set org.gnome.desktop.background picture-uri "file://${1:?No image specified}"
      gsettings set org.gnome.desktop.screensaver picture-uri "file://${1:?No image specified}"
    }
  ;;
  (sway)
    set_wallpaper() {
      swaybg --image "${1:?No image specified}"
    }
  ;;
  (''|*)
    if command -v feh >/dev/null 2>&1; then
      set_wallpaper() {
        feh --bg-fill "${1:?No image specified}"
      }
    fi
  ;;
esac

usage() {
  printf -- '%s\n' "Usage: dynamic_wallpapers setname"
  exit "${1:-0}"
}

################################################################################
# Main logic
################################################################################
main() {
  current_secs=$(seconds_since_midnight)

  # Parse any args, defines $set_name
  parse_opts "${@}"

  # Define the set_path variable
  set_path="${data_dir}/${set_name}"

  # Define the set_config variable
  set_config="${state_dir}/${set_name}.conf"

  # Does the image set have a config in the state_dir?
  # We keep disposable configs in files within state_dir rather than a config_dir,
  # and rather than generating every run, in order to keep sun-up and sun-down
  # aligned and to reduce traffic to/from weather.com
  if [[ -r "${set_config}" ]]; then
    # Load it up so that we get $config_file_generated
    # shellcheck source=/dev/null
    . "${set_config}"
    # If it's too old, regenerate and reload it
    # shellcheck disable=SC2154 # state_file_generated is sourced from the config
    if (( $(date +%s) > (config_file_generated + config_max_age) )); then
      generate_config "${set_name}"
      # shellcheck source=/dev/null
      . "${set_config}"
    fi
  # If, on the other hand, it doesn't exist, generate and load it
  else
    generate_config "${set_name}"
    # shellcheck source=/dev/null
    . "${set_config}"
  fi

  # By this point, the config should be sorted, so let's work through it
  while IFS=: read -r start finish wallpaper; do
    if (( current_secs >= start )) && (( current_secs <= finish )); then
      case "${wallpaper}" in
        (loop*)
          # Strip the leading 'loop:'
          wallpaper="${wallpaper/loop:/}"
          # Create an associative array
          declare -A wallpaper_loop
          # Split $wallpaper up and read it into our associative array
          while read -r; do
            case "${REPLY}" in
              (*:*) wallpaper_loop[${REPLY#*:}]="${REPLY%%:*}" ;;
              (*)   wallpaper_loop[${REPLY}]=auto ;;
            esac
          done < <(tr ',' '\n' <<< "${wallpaper}")
          # Loop through the array
          until (( current_secs >= finish )); do
            for wallpaper in "${!wallpaper_loop[@]}"; do
              set_wallpaper "${wallpaper}"
              case "${wallpaper_loop[$wallpaper]}" in
                (auto)
                  duration=$(( finish - start ))
                  sleep "$(( duration / "${#wallpaper_loop[@]}" ))"
                ;;
                (*)
                  sleep "${wallpaper_loop[$wallpaper]}"
                ;;
              esac
              current_secs="$(seconds_since_midnight)"
            done
          done
        ;;
        (*)
          if [[ "${current_wallpaper}" != "${wallpaper}" ]]; then
            set_wallpaper "${wallpaper}"
            break
          fi
        ;;
      esac
    fi
  done < "${set_config}"

  # Write the state file
  set_state
}

main "${@}"

################################################################################
# And we're done here, bye!
################################################################################
